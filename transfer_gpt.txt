# --- wide graph ---

from collections import defaultdict, deque
from typing import Dict, Tuple, List, Any, Optional
import math
import matplotlib.pyplot as plt
from matplotlib.patches import FancyArrowPatch, Rectangle, Circle


# 1) Successor iterator (uses model PROBS)
def iter_action_successors(action_obj, pre_state=None, prob_threshold: float = 0.0):
    """
    Yield (post_state, p) for a given action using action.probabilities.
    Supports two shapes:
      A) probabilities[pre_state][post_state] = p
      B) probabilities[post_state] = p
    Keeps edges where p >= prob_threshold (so 0.0 passes if threshold==0.0).
    """
    probs = getattr(action_obj, "probabilities", {}) or {}

    # shape A?
    if any(isinstance(v, dict) for v in probs.values()):
        row = probs.get(pre_state, {}) if pre_state is not None else {}
        for post_s, p in row.items():
            if p is not None and float(p) >= prob_threshold:
                yield post_s, float(p)
    else:
        # shape B
        for post_s, p in probs.items():
            if p is not None and float(p) >= prob_threshold:
                yield post_s, float(p)


# 2) Layer builder
def build_flow_layers(
    asc,
    start_state: str,
    prob_threshold: float = 0.0,
    terminal_clone_scope: str = "none",     # "none" | "action" | "layer"
    which_terminals=None,                   # set[str] or None
):
    """
    Build layered graph pieces for drawing.

    Returns:
      state_layers: dict[node_name -> even layer index]
      action_layers: dict[action_name -> odd layer index]
      edges: list[(u, v, {"p": float|None, "label": str|None})]
             (S->A unlabeled; A->target labeled)
      term_clones: dict[clone_name -> {"base": base_state,
                                       "scope": ("action", action) or ("layer", odd_layer)}]
    """
    if start_state not in asc.states:
        raise ValueError(f"start_state {start_state!r} not found in asc.states")
    if terminal_clone_scope not in {"none", "action", "layer"}:
        raise ValueError("terminal_clone_scope must be 'none', 'action', or 'layer'.")

    # helpers
    def all_from_states(asc_obj):
        s = set()
        for _a, a_obj in getattr(asc_obj, "actions", {}).items():
            fs = getattr(a_obj, "from_states", None)
            if fs:
                s.update(fs)
        return s

    def is_terminal_state(asc_obj, state_name, from_states_cache=None):
        st = asc_obj.states.get(state_name)
        if st is None:
            return True
        if getattr(st, "is_terminal", False):
            return True
        if not getattr(st, "actions", []):
            return True
        if from_states_cache is not None and state_name not in from_states_cache:
            return True
        return False

    from_states_cache = all_from_states(asc)

    state_layers: Dict[str, int] = {start_state: 0}   # even columns
    action_layers: Dict[str, int] = {}                # odd columns
    edges: List[Tuple[str, str, Dict[str, Any]]] = []
    term_clones: Dict[str, Dict[str, Any]] = {}

    q = deque([start_state])

    while q:
        s = q.popleft()
        s_layer = state_layers[s]  # even column
        s_obj = asc.states[s]

        for a in getattr(s_obj, "actions", []):
            # S -> A (unlabeled)
            edges.append((s, a, {"p": None, "label": None}))
            action_layers.setdefault(a, s_layer + 1)  # odd column next to S

            a_obj = asc.actions[a]
            for s_prime, p in iter_action_successors(
                a_obj, pre_state=s, prob_threshold=prob_threshold
            ):
                terminal = is_terminal_state(asc, s_prime, from_states_cache)

                clone_this = (
                    terminal
                    and terminal_clone_scope in {"action", "layer"}
                    and (which_terminals is None or s_prime in which_terminals)
                )

                if clone_this:
                    if terminal_clone_scope == "action":
                        # one clone per (terminal, action)
                        clone_name = f"{s_prime}|a:{a}"
                        clone_meta = {"base": s_prime, "scope": ("action", a)}
                        target_even = action_layers[a] + 1
                    else:  # "layer"
                        L = action_layers[a]
                        clone_name = f"{s_prime}|L:{L}"
                        clone_meta = {"base": s_prime, "scope": ("layer", L)}
                        target_even = L + 1

                    if clone_name not in term_clones:
                        term_clones[clone_name] = clone_meta
                        state_layers.setdefault(clone_name, target_even)

                    edges.append((a, clone_name, {"p": float(p), "label": f"{p:.3f}"}))

                else:
                    edges.append((a, s_prime, {"p": float(p), "label": f"{p:.3f}"}))
                    if s_prime not in state_layers:
                        state_layers[s_prime] = s_layer + 2
                        q.append(s_prime)

    return state_layers, action_layers, edges, term_clones


# 3) Drawer — curved left arrows + labels inside shapes + auto-sized shapes
def draw_asc_flow_matplotlib_wide(
    asc,
    start_state: str,
    prob_threshold: float = 0.0,
    terminal_clone_scope: str = "none",      # "none" | "action" | "layer"
    which_terminals=None,
    figsize=(12, 7),
    title: Optional[str] = None,
    hscale: float = 1.6,
    *,
    # node text
    node_fontsize: int = 10,
    node_padding_px: int = 6,        # padding around text inside shapes (pixels)
    # edge label
    edge_label_rotation: "float|str|None" = "auto",   # "auto" | number | None
    # dashed S→A
    sa_linestyle = "--",
    at_linestyle = "-",
    # curve left-going edges
    bend_left: bool = True,
    bend_rad: float = 0.18,
    bend_min_dx: float = 0.02,
):
    """
    Draw an ASC flow chart:
      • labels INSIDE the shapes; shapes auto-size to fit the text;
      • S→A dashed; A→T solid with probability labels (midpoint + slope rotation);
      • right→left arrows are gently curved.
    """
    # ---------- helpers ----------
    def _safe_prob(val: float) -> float:
        try:
            p = float(val)
        except (TypeError, ValueError):
            return 0.0
        if not math.isfinite(p): return 0.0
        if p < 0.0: p = 0.0
        if p > 1.0: p = 1.0
        return p

    def _measure_text_px(ax, text: str, fontsize: int):
        """Return (w_px, h_px) for text at fontsize, without drawing it."""
        t = ax.text(0, 0, text, fontsize=fontsize, ha="center", va="center", visible=False)
        fig = ax.figure
        fig.canvas.draw()  # ensure renderer exists
        bb = t.get_window_extent(renderer=fig.canvas.get_renderer())
        t.remove()
        return bb.width, bb.height

    def _px_to_data(ax, dx_px: float, dy_px: float):
        """Convert pixel deltas to data deltas at the origin."""
        inv = ax.transData.inverted()
        x0, y0 = inv.transform((0, 0))
        x1, y1 = inv.transform((dx_px, dy_px))
        return x1 - x0, y1 - y0

    # ---------- build skeleton ----------
    state_layers, action_layers, edges_raw, term_clones = build_flow_layers(
        asc,
        start_state=start_state,
        prob_threshold=prob_threshold,
        terminal_clone_scope=terminal_clone_scope,
        which_terminals=which_terminals,
    )

    # dedupe A→target; keep S→A unchanged
    edges_SA = []
    acc = {}  # (A, T) -> max p
    for u, v, data in edges_raw:
        if (u in state_layers) and (v in action_layers):
            edges_SA.append((u, v, {"p": None, "label": None}))
        else:
            try:
                p = float(data.get("p", 0.0))
            except (TypeError, ValueError):
                p = 0.0
            acc[(u, v)] = max(acc.get((u, v), p), p)
    edges_AT = [(u, v, {"p": float(p), "label": f"{p:.3f}"}) for (u, v), p in acc.items()]
    edges = edges_SA + edges_AT

    # ---------- layout ----------
    def positions_by_layer(names, layer_map):
        by_layer = defaultdict(list)
        for n in names:
            by_layer[layer_map[n]].append(n)
        pos = {}
        for L, nodes in by_layer.items():
            nodes = sorted(nodes)
            m = len(nodes)
            ys = [0.0] if m == 1 else [1 - 2 * i / (m - 1) for i in range(m)]
            for n, y in zip(nodes, ys):
                pos[n] = (L, y)
        return pos

    action_names = list(action_layers.keys())
    pos_actions = positions_by_layer(action_names, action_layers)

    clone_names = set(term_clones.keys())
    state_names = [s for s in state_layers if s not in clone_names]

    layer_to_items = defaultdict(list)
    for s in state_names:
        layer_to_items[state_layers[s]].append(("state", s))
    for c in clone_names:
        layer_to_items[state_layers[c]].append(("clone", c))

    pos_states, pos_clones = {}, {}
    for L, items in layer_to_items.items():
        items = sorted(items, key=lambda t: (t[0] != "state", t[1]))  # states first
        m = len(items)
        ys = [0.0] if m == 1 else [1 - 2 * i / (m - 1) for i in range(m)]
        for (kind, name), y in zip(items, ys):
            if kind == "state":
                pos_states[name] = (L, y)
            else:
                pos_clones[name] = (L, y)

    # normalize x
    all_layers = list(state_layers.values()) + list(action_layers.values())
    Lmin, Lmax = min(all_layers), max(all_layers)
    def xnorm(L):
        return 0.0 if Lmax == Lmin else ((L - Lmin) / (Lmax - Lmin)) * hscale

    # ---------- prepare figure (we need renderer for sizing) ----------
    fig, ax = plt.subplots(figsize=figsize, constrained_layout=True)
    ax.axis("off")
    if title:
        ax.set_title(title)

    # ---------- compute shape sizes from text ----------
    # measure → convert px to data → set sizes per node
    pad_dx, pad_dy = _px_to_data(ax, node_padding_px, node_padding_px)

    rect_size = {}   # node -> (w,h)
    circle_r = {}    # action -> r

    for s in state_names:
        w_px, h_px = _measure_text_px(ax, s, node_fontsize)
        w_d, h_d = _px_to_data(ax, w_px, h_px)
        rect_size[s] = (w_d + 2 * pad_dx, h_d + 2 * pad_dy)

    for c, meta in term_clones.items():
        base = meta["base"]
        w_px, h_px = _measure_text_px(ax, base, node_fontsize)
        w_d, h_d = _px_to_data(ax, w_px, h_px)
        rect_size[c] = (w_d + 2 * pad_dx, h_d + 2 * pad_dy)

    for a in action_names:
        w_px, h_px = _measure_text_px(ax, a, node_fontsize)
        w_d, h_d = _px_to_data(ax, w_px, h_px)
        # circle radius so W×H fits inside the disk
        r = 0.5 * math.sqrt((w_d + 2 * pad_dx) ** 2 + (h_d + 2 * pad_dy) ** 2)
        circle_r[a] = r

    # ---------- draw nodes (labels inside) ----------
    xs, ys = [], []   # collect extents for autoscale

    def add_rect(x, y, w, h, label):
        ax.add_patch(Rectangle((x - w/2, y - h/2), w, h, ec="black", fc="white"))
        ax.text(x, y, label, fontsize=node_fontsize, ha="center", va="center")
        xs.extend([x - w/2, x + w/2]); ys.extend([y - h/2, y + h/2])

    def add_circle(x, y, r, label):
        ax.add_patch(Circle((x, y), r, ec="black", fc="lightgrey"))
        ax.text(x, y, label, fontsize=node_fontsize, ha="center", va="center")
        xs.extend([x - r, x + r]); ys.extend([y - r, y + r])

    for s in state_names:
        xL, y = pos_states[s]; x = xnorm(xL)
        w, h = rect_size[s]
        add_rect(x, y, w, h, s)

    for a in action_names:
        xL, y = pos_actions[a]; x = xnorm(xL)
        add_circle(x, y, circle_r[a], a)

    for clone, (xL, y) in pos_clones.items():
        x = xnorm(xL)
        base = term_clones[clone]["base"]
        w, h = rect_size[clone]
        add_rect(x, y, w, h, base)

    # convenience lookups for offsets
    def x_half(node):
        if node in rect_size:
            return rect_size[node][0] / 2.0
        if node in circle_r:
            return circle_r[node]
        # default small offset if something missing
        return _px_to_data(ax, 6, 0)[0]

    # ---------- arrows (curved right→left, midpoint labels) ----------
    def arrow(xy0, xy1, *, label=None, lw=1.0, linestyle="-"):
        x0, y0 = xy0; x1, y1 = xy1
        dx, dy = (x1 - x0), (y1 - y0)

        # curve only when pointing left by a noticeable amount
        if bend_left and (dx < -bend_min_dx):
            sgn = 1 if dy >= 0 else -1
            conn = f"arc3,rad={sgn * bend_rad}"
        else:
            conn = "arc3,rad=0"

        patch = FancyArrowPatch(
            xy0, xy1,
            arrowstyle="-|>",
            lw=lw,
            color="black",
            linestyle=linestyle,
            capstyle="butt",
            joinstyle="miter",
            mutation_scale=20,
            connectionstyle=conn,
        )
        ax.add_patch(patch)

        # label like your working code: midpoint of chord + slope rotation
        if label is not None:
            try:
                label_str = f"{float(label):.3f}"
            except Exception:
                label_str = str(label)
            xm = (x0 + x1) / 2.0
            ym = (y0 + y1) / 2.0
            if isinstance(edge_label_rotation, (int, float)):
                rot = float(edge_label_rotation)
            elif edge_label_rotation == "auto":
                rot = math.degrees(math.atan2(y1 - y0, x1 - x0))
                if rot < -90 or rot > 90: rot += 180
            else:
                rot = 0.0
            ax.annotate(label_str, (xm, ym), xytext=(0, 4), textcoords="offset points",
                        fontsize=8, ha="center", va="bottom",
                        rotation=rot, rotation_mode="anchor",
                        clip_on=False, zorder=5)

    def get_xy(node):
        if node in pos_states:
            xL, y = pos_states[node]
        elif node in pos_actions:
            xL, y = pos_actions[node]
        else:
            xL, y = pos_clones[node]
        return (xnorm(xL), y)

    # draw edges with direction-aware clearance from shapes
    for u, v, data in edges:
        x0, y0 = get_xy(u)
        x1, y1 = get_xy(v)

        # compute start/end x so the arrow starts/ends at the shape boundary
        off_u = x_half(u) + _px_to_data(ax, 2, 0)[0]
        off_v = x_half(v) + _px_to_data(ax, 2, 0)[0]
        if x1 >= x0:
            sx = x0 + off_u; ex = x1 - off_v
        else:
            sx = x0 - off_u; ex = x1 + off_v

        p = data.get("p")
        lw = 1.0 if p is None else 1.0 + 3.0 * _safe_prob(p)

        is_SA = (u in pos_states) and (v in pos_actions)
        ls    = sa_linestyle if is_SA else at_linestyle

        label_val = None if is_SA else (data.get("label") if data.get("label") is not None
                                        else (f"{_safe_prob(p):.3f}" if p is not None else None))

        arrow((sx, y0), (ex, y1), label=label_val, lw=lw, linestyle=ls)

        # include arrow ends in extents so autoscale has room
        xs.extend([sx, ex]); ys.extend([y0, y1])

    # ---------- autoscale ----------
    if xs and ys:
        ax.set_xlim(min(xs) - 0.06, max(xs) + 0.06)
        ax.set_ylim(min(ys) - 0.10, max(ys) + 0.10)
    ax.margins(x=0.02, y=0.04)

    return fig, ax