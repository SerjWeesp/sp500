from types import SimpleNamespace
from collections import defaultdict

def ascmdp_to_asc_like(ascmdp):
    # 1) States with outgoing actions
    states = {}
    actions = {}
    S = getattr(ascmdp, "states", range(ascmdp.no_states))

    for s in S:
        acts = list(ascmdp.actions_from_state(s))
        states[s] = SimpleNamespace(actions=acts, is_terminal=(len(acts)==0))

    # 2) Actions with probabilities in “shape A”: probs[pre_state][post_state] = p
    for s in S:
        for a in states[s].actions:
            probs = actions.setdefault(a, SimpleNamespace(probabilities=defaultdict(dict))).probabilities
            for s_prime, p in ascmdp.T(s, a).items():
                # normalize terminal key for your drawer: keep None or use a label like "⟂"
                probs[s][s_prime] = float(p)

    asc_like = SimpleNamespace(states=states, actions=actions, start_state=next(iter(S)))
    return asc_like
